#!/usr/bin/env ruby
# purpose: output kml to stderr
# TODO:
# profile me!
# generate a unique set of geohashes, bypass geocluster array arg
## try geohash or pr_geohash
require 'bundler/setup'
require_relative '../lib/piloto'
require 'geocluster'
require 'ruby_kml'
require 'thor'

# purpose: skip waypoints inside a box

def skippable?(lat, lon)
  lat_nw = 40.714
  lon_nw = -73.951
  lat_ne = 40.71444
  lon_ne = -73.935
  lat_sw = 40.711
  lon_sw = -73.951
  lat_se = 40.713399
  lon_se = -73.934822
  if (lat >= lat_sw && lat <= lat_nw && lon <= lon_ne && lon >= lon_nw)
    return true
  else
    return false
  end
end

class GenKML < Thor
  desc "genkml", "genkml"
  option :dir_files_gps
  option :limit_waypoints
  def genkml
    limit_waypoints = options[:limit_waypoints].to_i || 0 
    options_cc = {
      :limit => 200,
      #:nucleus => true,
      :precision => 8,
    }

    dir_files_gps = options[:dir_files_gps] || "#{ENV['HOME']}/m/rp3-piloto-1/log"
    Dir.chdir dir_files_gps
    files = Dir.glob("*.gps").sort { |a,b| File.mtime(b) <=> File.mtime(a) }
    a_gps = []
    index = 0
    breakme = false
    puts "#{Time.now} parse start, waypoints limited to #{limit_waypoints}"
    count_files = 0
    files.each do |f|
      if File.size(f) > 0
        a_file_gps = Piloto.gps_to_array(f)
        count_files += 1
        a_file_gps.each do |h|
          if skippable?(h['lat'], h['lon'])
            next
          end
          a_gps.push [
            h['lat'], h['lon']
          ]
          index += 1
          if limit_waypoints && index >= limit_waypoints
            breakme = true
          end
          break if breakme
        end
      end
      break if breakme
    end
    puts "#{Time.now} parse done: #{index} waypoints, about #{count_files} files"

    puts "#{Time.now} cluster start #{a_gps.length}"
    cluster = Geocluster.cluster_coordinates(a_gps, options_cc)
    #puts [D: cluster]
    puts "#{Time.now} cluster done: ~#{count_files} files / #{cluster.length} markers / #{index} waypoints"

    puts "#{Time.now} kml start"
    kml = KMLFile.new
    folder = KML::Folder.new(:name => 'piloto')
    cluster.each do |c|
      #puts c
      #puts c[:count]
      folder.features << KML::Placemark.new(
        :name => c[:count],
        :geometry => KML::Point.new(:coordinates => {:lat => c[:coordinates][0], :lng => c[:coordinates][1]}),
      )
    end
    kml.objects << folder
    STDERR.puts kml.render
    puts "#{Time.now} kml done"
  end

end
GenKML.start(ARGV)
