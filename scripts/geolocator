#!/usr/bin/env ruby
$: << File.join(File.dirname(__FILE__), '..', 'lib')
require 'gpsd_client'
require 'logger'
require 'piloto'
require 'rest-client'

@google_geolocation_api_wifi_min = 2
dir_scripts = File.expand_path File.dirname(__FILE__)
#@geolog = Logger.new("#{dir_scripts}/../log/geolocator.log", 'daily')
dir_log = "#{dir_scripts}/../log/geolocator"
Dir.mkdir dir_log unless Dir.exists? dir_log
tstamp_day = Time.now.strftime("%Y-%m-%d")
@geolog = Logger.new("#{dir_log}/geolocator.#{tstamp_day}.log") 

def gps_geo
  pos = nil
  client = GpsdClient::Gpsd.new
  client.start
  if client.started?
    # sometimes this explodes due to nilclass error, gpsd_client needs a fix
    # trap this exception so we can move on to other methods of geolocation
    begin
      pos = client.get_position
    end
  end
  client.stop
  return pos
end

def google_geo(payload)
  headers = {content_type: :json, accept: :json}
  response = Google.geolocate(payload, headers)
end

# purpose: compile a google-api-friendly list of APs

def scan_ssids
  wifi_access_points = []
  Wpa.wpa.scan
  Wpa.wpa.scan_results.each do |r|
    if r.bssid

      # this hash format should match google's accepted format

      ap = {
        age: 0,
        macAddress: r.bssid,
        signalStrength: r.signal_level,
      }
      wifi_access_points.push(ap)
    end
  end
  return wifi_access_points
end

have_geo = false
output = {
  hostid: Piloto.hostid,
  hostname: Piloto.hostname,
}

gps_position = gps_geo
if gps_position[:lat]
  have_geo = true
  output.merge!({mode: 'gps', data: gps_position})
elsif !have_geo && Piloto.ping.success?
  wifi_access_points = scan_ssids

  # send data to google for geolocation

  if wifi_access_points.length >= @google_geolocation_api_wifi_min
    payload = {
      considerIp: true, # defaults to true
      wifiAccessPoints: wifi_access_points,
    }
    result = google_geo(payload)
    google_data = JSON.parse(result)
    unless google_data['error']
      have_geo = true
    end
    output.merge!({mode: 'google', data: google_data, wifi: wifi_access_points.length})
  end
end
if have_geo
  output.merge!({time: Time.now})
  output_log = output.to_json
  @geolog << ("#{output_log}\n")
  #puts output_log
end
