#!/usr/bin/env ruby
# purpose: load airodump data into dynamodb
# TODO:
# - if we just re-load all the data, we don't care about filenames
# -- how much does this cost in time and money?
# gps
# - hostid-timestamp as key, and drop json in as the value
# - this should be accurate enough for non sr-71s
require 'date'
require 'json'
require 'open3'
require 'securerandom'
require 'rubygems'
require 'bundler/setup'
require 'aws-sdk'
STDOUT.sync = true

=begin
files_loaded: {
  filename
  tstamp_loaded
}
gps: {
  time
  alt
  class
  climb
  device
  ept
  hostid
  hostname
  lat
  long
  mode
  speed
  tag
  track
}
=end

c = Aws::DynamoDB::Client.new(region: 'us-east-1')
r_list_tables = c.list_tables
puts r_list_tables.table_names 
#puts Time.now.methods
file_input = '/home/ubuntu/m/rp3-piloto-1/log/rp3-piloto-1-007f0101-09.gps'
f_gps = File.read(file_input)
f_gps.gsub!(/\r\n?/, "\n")
count = 0
f_gps.each_line do |line|
  # just throw away lines that don't parse
  # the file could end with indications of a hard stop, malformed json
  # missing the final part including "}", this could get more interesting...
  #unless line =~ /\}$/
  #  line = "#{line}\"}"
  #end
  h = {}
  parsed = false
  begin
    h = JSON.parse(line)
    parsed = true
  rescue
  end
  if parsed
    #puts [DEBUG: h] 
    uuid = SecureRandom.uuid
    time = DateTime.parse(h['time']).strftime('%Q')
    count += 1
    puts [uuid, time]
    #puts count
  end
end
#f_gps.close
abort
r_put_item = c.put_item({
  table_name: 'piloto-gps-test',
  item: {
    timestamp: Time.now,
    foo: 'bar'
  },
})
puts r_put_item
=begin
#begin
  #resp = dynamodb.list_tables
  #puts resp.attributes
#rescue Aws::DynamoDB::Errors::ServiceError
#end
=end
