#!/usr/bin/env ruby
# NOTE:
# - run this every 2 mins max in cron, or for some reason the scan cache clears
# purpose:
# - try and get a connection to the internet via open wifi networks
# - run periodically to associate and test open wifi networks
# the plan:
# - enable all scanned open networks that pass criteria (regex, etc)
# - ping a known host, such as google.com
# -- if the ping succeeds
# --- do nothing, we have a connection to the internet
# -- if the ping fails
# --- check if the current network is an open network
# ---- if network is open and second ping fails, disable it

require 'bundler/setup'
require 'active_support'
$: << File.join(File.dirname(__FILE__), '..', 'lib')
require 'piloto'

@host_ping = ENV['PILOTO_HOST_PING'] || 'google.com'
@regex_ssid_ignore = %r{
  ^CableWiFi
  |^Chromecast
  |^HP-Print
  |^optimumwifi
  |^TWCWiFi
  |^xfinitywifi
}x
@h_log = {}

# purpose: determine if we have internet connectivity
#          there is probably a better way to do this

def ping
  _ = `ping -c 1 #{@host_ping} > /dev/null 2>&1`
  return $?
end

# purpose: add and enable a wifi network, test, remove if bogus

def provisional_add(ssid)
end

#require 'pry';binding.pry
h_ssid_current = Wpa.list_ssid_current
ssid_current = h_ssid_current ? h_ssid_current['ssid'] : 'none'
ping_success = ping.success?

@h_log['t'] = Time.now.strftime("%Y-%m-%d %H:%M")
@h_log['u'] = `uptime -s`.chomp
@h_log['s'] = ssid_current
@h_log['p'] = ping_success

ssids_ess = []
ssids_skipped_regex = []
count_ssids_hidden = 0
count_ssids_regex = 0
count_ssids_scanned = 0
count_ssids_skipped = 0
count_ssids_wpa = 0

# scan now and get results

Wpa.wpa.scan
Wpa.wpa.scan_results.each do |r|
  count_ssids_scanned += 1

  # skip blank/hidden ssids until we have a handler for these

  unless r.ssid
    count_ssids_hidden += 1
    count_ssids_skipped += 1
    next
  end

  # skip protected ssids

  unless r.flags == '[ESS]'
    count_ssids_wpa += 1
    count_ssids_skipped += 1
    next
  end

  # skip current ssid

  if Wpa.is_ssid_current(r.ssid)
    count_ssids_skipped += 1
    next
  end

  # skip cable wifi, printers, etc

  if r.ssid =~ @regex_ssid_ignore
    ssids_skipped_regex.push r.ssid
    count_ssids_skipped += 1
    next
  end

  ssids_ess.push r.ssid
end
@h_log['re'] = ssids_skipped_regex.length
@h_log['sk'] = count_ssids_skipped
@h_log['e'] = ssids_ess
@h_log['a'] = []

# remove the current open network if we still don't have internetz
# there could be timing problems here, need to test it

if !ping.success?
  ssid_current = Wpa.list_ssid_current
  Wpa.wpa.scan
  Wpa.wpa.scan_results.each do |r|
    break unless ssid_current
    if r.ssid == ssid_current.ssid && r.flags == '[ESS]' && !ping.success?
      Wpa.wpa.disable_network(ssid_current.network_id)
      @h_log['r'].push(ssid_current.ssid)
    end
  end
end

# add ssids if we have candidates

if ssids_ess.length > 0 && !ping_success
  list_networks = ActiveSupport::ArrayInquirer.new(Wpa.wpa.list_networks)
  ssids_ess.each do |s|
    next if list_networks.any?(s)
    network_id = Wpa.wpa.add_network 
    Wpa.wpa.set_network(network_id, "ssid", s)
    Wpa.wpa.set_network(network_id, "key_mgmt", :NONE)
    Wpa.wpa.enable_network(network_id)
    @h_log['a'].push(s)
  end
end

if ssids_ess.length > 0
  puts @h_log.to_json
end
